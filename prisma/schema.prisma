datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  Image    Image[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Image {
  id        String   @id @default(cuid())
  userId    String
  kind      String // "full_body" (you can reuse for other kinds later)
  bucketKey String // path in your bucket: users/<uid>/<uuid>.jpg
  url       String // CDN/public URL for display
  width     Int?
  height    Int?
  bytes     Int?
  primary   Boolean  @default(false) // highlighted/selected
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, kind])
}


model TryOnResult {
  id          String   @id @default(cuid())
  userId      String?
  modelUrl    String
  garmentUrl  String
  modelHash   String
  garmentHash String
  keyHash     String   @unique
  apiJobId    String?
  resultUrl   String?
  status      String   // "pending" | "completed" | "failed"
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([apiJobId])
  @@index([modelHash, garmentHash])
}


model LicenseKey {
  id              String   @id @default(cuid())
  codeHash        String   @unique
  label           String?
  userId          String?
  email           String?
  maxActivations  Int      @default(1)
  activationsUsed Int      @default(0)
  expiresAt       DateTime?
  revoked         Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model ExtToken {
  id         String   @id @default(cuid())
  jti        String   @unique
  userId     String
  email      String?
  licenseId  String?
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
}
